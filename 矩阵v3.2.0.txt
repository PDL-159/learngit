# 主程序
def main():
    print('这是一个处理有理矩阵的程序\n\
录入矩阵时,元素以分数(a/b)或整数形式输入\n\
元素之间以空格相间，每行输完按回车\n')
    while True:
        a=asp(0)
        if a=='1':
            print('若要结束录入，在新的一行输入元素的个数异于之前就好')
            while True:
                func1()
                if asp(1) in ['r','R']:
                    break
        elif a=='2':
            print('若要结束录入，在新的一行输入元素的个数异于之前就好')
            while True:
                func2()
                if asp(1) in ['r','R']:
                    break
        elif a=='3':
            print('若要结束录入，在新的一行输入元素的个数异于之前就好')
            while True:
                func3()
                if asp(1) in ['r','R']:
                    break
        elif a=='4':
            print('若要结束录入，在新的一行输入元素的个数异于之前就好')
            while True:
                func4()
                if asp(1) in ['r','R']:
                    break
        elif a=='5':
            print('输入下三角即可,停止下三角输入会结束录入')
            while True:
                func5()
                if asp(1) in ['r','R']:
                    break
        elif a=='6':
            print('若要结束录入，在新的一行输入元素的个数异于之前就好')
            while True:
                func6()
                if asp(1) in ['r','R']:
                    break
        else:
            break
    print('已退出程序')
#选项
def asp(p):
    print('\n')
    if p==0:                         # p==0'功能'选择,p==1'返回'选择
        return input('你想要的功能是?\n\
1.计算矩阵对应的行列式的值\n\
2.将矩阵通过初等行变换化为最简行阶梯矩阵形式\n\
3.计算矩阵的逆\n\
4.解增广矩阵对应的线性方程\n\
5.给出将二次型矩阵化为规范型的一个变换\n\
6.矩阵乘法\n\
7.退出\n')
    elif p==1:
        return input('按r/R返回')
# input
def getd(A):                     #A为input选择参数 不得使d中元素的值改变以便避免不兼容新功能 返回的行数列数均为原版的值 return 0,0,0时录入失败
    i,d,n=0,{},[]
    while True:
        d[i],num=getline(i)
        i+=1
        if A in [0,1,-1]:
            n+=[num]
            if i>1:
                if num!=n[-2]:
                    del d[i-1]
                    if A in [1,-1]:           #return d,i-1,n[-2]
                        if i-1!=n[-2]:
                            print('你得输个方阵吧......')
                            return 0,0,0
                        if A in [1]:
                            for b1 in range(i-1):
                                for b2 in range(n[-2]):
                                    if b1==b2:
                                        d[b1]+=[{0:1,1:1}]
                                    else:
                                        d[b1]+=[{0:0,1:1}]
                    return d,i-1,n[-2]
            else:
                if num==0:
                    return 0,0,0
        elif A in [2]:
            if num!=i:
                del d[i-1]
                if i-1!=0:                       #return d,i-1
                    for b3 in range(i-1):
                        for b4 in range(b3+1,2*i-2):
                            if b4<i-1:
                                d[b3]+=[{0:d[b4][b3][0],1:d[b4][b3][1]}]
                            elif b4==i-1+b3:
                                d[b3]+=[{0:1,1:1}]
                            else:
                                d[b3]+=[{0:0,1:1}]
                    return d,i-1,i-1
                else:
                    return 0,0,0
def getline(i):
    b=input('请输入第{}行:'.format(i+1))
    b=b.split()
    line,num=[],0
    for k in b:
        try:                              #小数或零出现在分数中会异常,但不报错
            if '/' in k:
                b0,b1=int(k[:k.index('/')]),int(k[k.index('/')+1:])
                m=maxfactor(b0,b1)[0]
                if b1>0:
                    b2={0:b0//m,1:b1//m}
                else:
                    b2={0:-b0//m,1:-b1//m}
            else:
                b2={0:int(k),1:1}
        except:
            continue
        line+=[b2]
        num+=1
    return line,num                  #已约分 num==len(line)
# 数理
def maxfactor(a,b):              #a,b!=0,a,b为整数  最大公因数
    p,A,B=0,(1,0),(0,1)
    if abs(a)<abs(b):
        a,b,p=b,a,1
    while a%b!=0:
        a,b,A,B=b,a%b,B,(A[0]-a//b*B[0],A[1]-a//b*B[1])
    if b<0:
        m,A,B=-b,-B[0],-B[1]
    else:
        m,A,B=b,B[0],B[1]
    if p==0:
        return m,A,B
    else:
        return m,B,A
def mcm(a,b):               #  最小公倍数 正数
    return abs(a*b//maxfactor(a,b)[0])
def mmfl(a):           #  最小公倍数for line
    b1=1
    for b in range(len(a)):
        b1=mcm(b1,a[b][1])
    return b1
def zspd(a,s):       #质数判断 a正整数 s已知质数列表   0 fause a true
    t=int(a**(1/2)+2)
    while True:
        if s[-1]>t:
            i=0
            while s[i]<=t:
                if a%s[i]==0:
                    return 0
                i+=1
            return a
        else:
            k=s[-1]+1
            while True:
                if zspd(k,s)!=0:
                    s+=[k]
                    break
                k+=1
def fj(a):       #将a化为质数积,以字典形式输出
    D,i={},0
    s=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
       47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\
       107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,\
       167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, \
       229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, \
       283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, \
       359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, \
       431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, \
       491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569,\
       571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, \
       641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, \
       709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, \
       787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, \
       859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, \
       941, 947, 953, 967, 971, 977, 983, 991, 997]
    while True:
        if i==len(s):
            k=s[-1]+1
            while True:
                if zspd(k,s)!=0:
                    s+=[k]
                    break
                k+=1
        if a**(1/2)+2<s[i]:
            if a in D:
                D[a]+=1
            else:
                D[a]=1
            return D
        j=0
        while a%s[i]==0:
            a=a//s[i]
            j+=1
        D[s[i]]=j
        i+=1
#规则
def fsh(a,b):           #分数和 已约分
    if a[0]!=0:
        if b[0]!=0:
            c1=mcm(a[1],b[1])
            c0=a[0]*c1//a[1]+b[0]*c1//b[1]
            if c0==0:
                return {0:0,1:1}
            c=maxfactor(c1,c0)[0]
            return {0:c0//c,1:c1//c}
        else:
            return {0:a[0],1:a[1]}
    else:
        return {0:b[0],1:b[1]}
def fsj(a,b):               #分数积 已约分
    if a[0]!=0:
        if b[0]!=0:
            c1=a[1]*b[1]
            c0=a[0]*b[0]
            c=maxfactor(c1,c0)[0]
            if c1>0:
                return {0:c0//c,1:c1//c}
            else:
                return {0:-c0//c,1:-c1//c}
    return {0:0,1:1}
def hch(a,b,h):         #行乘 h为行 a/b a,b整数   b!=0
    H=[]
    for i in h:
        H+=[fsj({0:a,1:b},i)]
    return H
def hhp(a1,b1,h1,a2,b2,h2):           #a1/b1*h1+a2/b2*h2   b1,b2!=0     行和plus
    H1=hch(a1,b1,h1)
    H2=hch(a2,b2,h2)
    H=[]
    for i in range(len(h1)):
        H+=[fsh(H1[i],H2[i])]
    return H
#处理
def run1(d,h,l,o):                    #s乘数 e交换数 B非零行首位坐标列表  o选项参数  
    s=1
    for i in range(h):
        a=mmfl(d[i])
        d[i]=hch(a,1,d[i])
        s*=a
    j,p,e,B=0,0,0,[]
    while True:
        if j+p==l:
            break
        b=[]
        for i in range(j,h):
            if d[i][j+p][0]!=0:
                b+=[i]
                if len(b)>1:
                    c,c1,c2=maxfactor(d[b[-2]][j+p][0],d[i][j+p][0])  #这里c仅占位
                    if c2!=0:
                        s*=c2
                        d[i]=hhp(c1,1,d[b[-2]],c2,1,d[i])
                    else:
                        d[i],d[b[-2]]=d[b[-2]],d[i]
                        e+=1
        if len(b)>0:
            if b[-1]!=j:
                d[j],d[b[-1]]=d[b[-1]],d[j]
                e+=1
            if j in b:
                del b[0]
            else:
                del b[-1]
            for i in b:
                d[i]=hhp(-d[i][j+p][0]//d[j][j+p][0],1,d[j],1,1,d[i])
            B+=[(j,j+p)]
            j+=1
        else:
            if o in [1,3]:
                return 'n'          #需添加
            p+=1
    if o in [1]:
        S=(-1)**e
        for i in range(h):
            S*=d[i][i][0]
        m=maxfactor(S,s)[0]
        s,S=s//m,S//m
        if s<0:
            return {0:-S,1:-s}
        else:
            return {0:S,1:s}
    elif o in [2,3,4]:
        for b1 in B:
            for b2 in range(b1[0]):
                c1=d[b2][b1[1]][0]
                if c1==0:
                    continue
                c2=d[b1[0]][b1[1]][0]
                c=mcm(c1,c2)
                d[b2]=hhp(c//c1,1,d[b2],-c//c2,1,d[b1[0]])
        for b1 in B:
            d[b1[0]]=hch(1,d[b1[0]][b1[1]][0],d[b1[0]])
        if o in [4]:
            return d,B
        return d
def xxfch(d,l,B):               #线性方程   处理+输出
    X,x,bh,bl,p=[],[],[],[],0
    for i in B:
        bl+=[i[1]]
        bh+=[i[0]]
    for i in range(l-1):
        if i in bl:
            b=d[bh[bl.index(i)]][l-1]
            x+=[b]
            if b[0]!=0:
                p=1
        else:
            x+=[{0:0,1:1}]
    X+=[x]
    bbl=[]
    for i in range(l-1):
        if i not in bl:
            bbl+=[i]
    for i in range(len(bbl)):
        x=[]
        for b in range(l-1):
            if b in bl:
                x+=[{0:-d[bh[bl.index(b)]][bbl[i]][0],1:d[bh[bl.index(b)]][bbl[i]][1]}]
            elif b==bbl[i]:
                x+=[{0:1,1:1}]
            else:
                x+=[{0:0,1:1}]
        X+=[x]
    if len(X)==1:
        print('该线性方程的唯一解为:')
        showsj(X[0],l-1)
        return
    if p==0:
        del X[0]
        print('该齐次线性方程的基础解系如下:')
        showj(X,l-1)
        return
    print('该非齐次线性方程的一个解为:')
    showsj(X[0],l-1)
    print('其对应的齐次线性方程的基础解系如下:')
    del X[0]
    showj(X,l-1)
def ff5(d,b1,b2,l):       #for func5  将b2行,列加到b1行,列上去   h==l  在函数内已改动d
    d[b1]=hhp(1,1,d[b1],1,1,d[b2])
    for i in range(b1+1,l):
        d[i][b1]=d[b1][i]
    d[b1][b1]=fsh(d[b1][b1],d[b2][b1])
    return d
#output
def of(a):            #output分数
    if a[1]==1:
        print('{:<8}'.format(a[0]),end='')
    else:
        print('{:<8}'.format(str(a[0])+'/'+str(a[1])),end='')
def ojp(d,H,L,zb=(0,0)):           #自zb=(a,b)起输出H行L列  zb坐标  output矩阵plus
    for b1 in range(zb[0],zb[0]+H):
        for b2 in range(zb[1],zb[1]+L):
            of(d[b1][b2])
            print('|',end='')
        print()
def showsj(a,b):            #show single 解 a形式为[{0:x,1:x}{0:x,1:x}...] b==len(a)
    print('(',end='')
    for i in range(b):
        of(a[i])
        if i==b-1:
            continue
        print(',',end='')
    print(')')
def showj(a,lenforone):       #a=X, lenforone见showsj()
    n=0
    for i in a:
        showsj(i,lenforone)
        n+=1
    print('共{}个.'.format(n))
def of5(d,h,l):          #output for func5 l为原版l
    for i in range(l):
        for j in range(h):
            if d[j][i+1][1]==1:               #of(d[j][i+1])
                if d[j][0]==1:
                    print('{:<9}|'.format(d[j][i+1][0]),end='')
                else:
                    if d[j][i+1][0]!=0:
                        if d[j][i+1][0]==1:
                            print('{:<8}|'.format('厂({})'.format(d[j][0])),end='')
                        elif d[j][i+1][0]==-1:
                            print('{:<8}|'.format('-厂({})'.format(d[j][0])),end='')
                        else:
                            print('{:<8}|'.format(str(d[j][i+1][0])+'厂({})'.format(d[j][0])),end='')
                    else:
                        print('{:<9}|'.format(0),end='')
            else:
                if d[j][0]==1:
                    print('{:<9}|'.format(str(d[j][i+1][0])+'/'+str(d[j][i+1][1])),end='')
                else:
                    if d[j][i+1][0]==1:
                        print('{:<8}|'.format('厂({})'.format(d[j][0])+'/'+str(d[j][i+1][1])),end='')
                    elif d[j][i+1][0]==-1:
                        print('{:<8}|'.format('-厂({})'.format(d[j][0])+'/'+str(d[j][i+1][1])),end='')
                    else:
                        print('{:<8}|'.format(str(d[j][i+1][0])+'厂({})'.format(d[j][0])+'/'+str(d[j][i+1][1])),end='')
        print()
#功能1 计算矩阵对应的行列式的值  getd(-1) run1()o==1   input原版+方阵检查
def func1():
    d,h,l=getd(-1)
    if h==0:
        print('录入无效')
        return
    print('已录入该{}*{}矩阵'.format(h,l))
    v=run1(d,h,l,1)
    if type(v)!=dict:
        v={0:0,1:1}
    print('其对应的行列式值为:')
    of(v)
#功能2 将矩阵通过初等行变换化为最简行阶梯矩阵形式  getd(0) run1()o==2  input原版
def func2():
    d,h,l=getd(0)
    if h==0:
        print('录入无效')
        return
    print('已录入该{}*{}矩阵'.format(h,l))
    d=run1(d,h,l,2)
    print('其对应的最简行阶梯矩阵为:')
    ojp(d,h,l)
#功能3 计算矩阵的逆  getd(1) run1()o==3  input拓展方式1+方阵检查
def func3():
    d,h,l=getd(1)
    if h==0:
        print('录入无效')
        return
    print('已录入该{}*{}矩阵'.format(h,l))
    d=run1(d,h,l,3)
    if type(d)!=dict:
        print('该矩阵不可逆')
        return
    print('其逆为:')
    ojp(d,h,l,(0,l))        #(0,l) <--L
#功能4 解增广矩阵对应的线性方程   getd(0) run1()o==4  input原版
def func4():
    d,h,l=getd(0)
    if l<2:
        print('录入无效')
        return
    print('已录入该{}*{}矩阵'.format(h,l))
    d,B=run1(d,h,l,4)
    if B[-1][1]==l-1:
        print('无解')
        return
    xxfch(d,l,B)
#功能5 给出将二次型矩阵化为规范型的一个变换  getd(2)  input拓展方式2(特) 只录入下三角
def func5():
    d,h,l=getd(2)
    if h==0:
        print('录入无效')
        return
    print('已录入该{}*{}矩阵'.format(h,l))
    az,af,a0,b1=[],[],[],0
    while True:
        if b1==h:
            break
        if d[b1][b1][0]!=0:
            for b2 in range(b1+1,h):
                if d[b2][b1][0]!=0:
                    c={0:d[b1][b1][1],1:d[b1][b1][0]}
                    c=fsj(c,d[b2][b1])
                    d[b2]=hhp(-c[0],c[1],d[b1],1,1,d[b2])
            if d[b1][b1][0]>0:
                az+=[b1]
            else:
                af+=[b1]
            b1+=1
        else:
            for b2 in range(b1+1,h):
                if d[b1][b2][0]!=0:
                    break            #此处b2非零行行标
            else:
                a0+=[b1]
                b1+=1
                continue
            d=ff5(d,b1,b2,l)
            if d[b1][b1][0]==0:
                d=ff5(d,b1,b2,l)
    for i in range(l):                        #取右部分得新d的同时开方,之后再进行行顺序调整
        if d[i][i][0]!=0:
            D=fj(abs(d[i][i][0]*d[i][i][1]))
            K0,K=1,1                #K根号内 K0根号外提出部分
            for k in D:
                K0*=k**(D[k]//2)
                K*=k**(D[k]%2)
            c=[K]                              #列数变为l+1
            for j in range(l):
                c+=[fsj(d[i][l+j],{0:K0,1:abs(d[i][i][0])})]
            d[i]=c
        else:
            c=[1]                        #列数变为l+1
            for j in range(l):
                c+=[d[i][l+j]]
            d[i]=c
    bz,bf,b0=len(az),len(af),len(a0)    #顺序调整
    for i in az:
        if bz<=i<bz+bf:
            for j in af:
                if j<bz:
                    d[i],d[j]=d[j],d[i]
                    az[az.index(i)],af[af.index(j)]=j,i
                    break
            else:
                for j in a0:
                    if j<bz:
                        d[i],d[j]=d[j],d[i]
                        az[az.index(i)],a0[a0.index(j)]=j,i
                        break
        elif i>=bz+bf:
            for j in a0:
                if j<bz:
                    d[i],d[j]=d[j],d[i]
                    az[az.index(i)],a0[a0.index(j)]=j,i
                    break
            else:
                for j in af:
                    if j<bz:
                        d[i],d[j]=d[j],d[i]
                        az[az.index(i)],af[af.index(j)]=j,i
                        break
    for i in af:
        if i>=bz+bf:
            for j in a0:
                if j<bz+bf:
                    d[i],d[j]=d[j],d[i]
                    af[af.index(i)],a0[a0.index(j)]=j,i
                    break
    print('其正惯性指数为{},负惯性指数为{}\n其做变换X=CY即可化为规范型,其中C如下:'.format(bz,bf))#output(d)    d 行==h 列==l+1 但列参数应输入l 转置
    of5(d,h,l)
#功能6 矩阵乘法  getd(0)  input原版     乘法适用性检查
def func6():
    print('将计算矩阵1*矩阵2\n现在输入矩阵1:')
    while True:
        d1,h1,l1=getd(0)
        if h1>0:
            print('已录入该{}*{}矩阵'.format(h1,l1))
            break
        else:
            print('录入无效,请重新录入矩阵1.')
    print('现在输入矩阵2(应为{}*X矩阵):'.format(l1))
    while True:
        d2,h2,l2=getd(0)
        if h2>0:
            print('已录入该{}*{}矩阵'.format(h2,l2))
            break
        else:
            print('录入无效,请重新录入矩阵2.')
    if l1!=h2:
        print('乘法不适用于此.')
        return
    d={}
    for h in range(h1):
        d[h]=[]
        for l in range(l2):
            b2={0:0,1:1}
            for b1 in range(h2):
                b2=fsh(b2,fsj(d1[h][b1],d2[b1][l]))
            d[h]+=[b2]
    print('其积为:')
    ojp(d,h1,l2)
#main
main()
#下一步解决输出时的列对齐问题
